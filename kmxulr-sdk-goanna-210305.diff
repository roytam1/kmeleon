diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/FrameMetrics.h xulrunner-sdk/include/FrameMetrics.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/FrameMetrics.h	2021-02-12 13:42:51.037206000 +0800
+++ xulrunner-sdk/include/FrameMetrics.h	2021-03-05 09:44:08.689223300 +0800
@@ -12,11 +12,12 @@
 #include "mozilla/gfx/BasePoint.h"      // for BasePoint
 #include "mozilla/gfx/Rect.h"           // for RoundedIn
 #include "mozilla/gfx/ScaleFactor.h"    // for ScaleFactor
 #include "mozilla/gfx/Logging.h"        // for Log
 #include "gfxColor.h"
-#include "nsString.h"
+//#include "nsString.h"
+#include <nsStringAPI.h>
 
 namespace IPC {
 template <typename T> struct ParamTraits;
 } // namespace IPC
 
diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/js/Debug.h xulrunner-sdk/include/js/Debug.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/js/Debug.h	2021-02-17 20:36:40.099713000 +0800
+++ xulrunner-sdk/include/js/Debug.h	2021-03-05 09:44:08.690223400 +0800
@@ -131,11 +131,11 @@
     js::Debugger* debugger;
 
     // Check that |thing| is in the same compartment as our debuggerObject. Used
     // for assertions when constructing BuiltThings. We can overload this as we
     // add more instantiations of BuiltThing.
-#if DEBUG
+#ifndef NDEBUG
     void assertBuilt(JSObject* obj);
 #else
     void assertBuilt(JSObject* obj) { }
 #endif
 
diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/mozilla/a11y/Accessible.h xulrunner-sdk/include/mozilla/a11y/Accessible.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/mozilla/a11y/Accessible.h	2020-12-21 14:19:39.873614000 +0800
+++ xulrunner-sdk/include/mozilla/a11y/Accessible.h	2021-03-05 09:44:08.690223400 +0800
@@ -10,11 +10,12 @@
 #include "mozilla/a11y/RelationType.h"
 #include "mozilla/a11y/Role.h"
 #include "mozilla/a11y/States.h"
 
 #include "nsIContent.h"
-#include "nsString.h"
+//#include "nsString.h"
+#include <nsStringAPI.h>
 #include "nsTArray.h"
 #include "nsRefPtrHashtable.h"
 #include "nsRect.h"
 
 struct nsRoleMapEntry;
diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsCoord.h xulrunner-sdk/include/nsCoord.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsCoord.h	2020-12-21 14:19:45.637943000 +0800
+++ xulrunner-sdk/include/nsCoord.h	2021-03-05 09:44:08.691223400 +0800
@@ -161,11 +161,11 @@
     // infinity + anything = anything + infinity = infinity
     return nscoord_MAX;
   } else {
     // a + b = a + b
     // Cap the result, just in case we're dealing with numbers near nscoord_MAX
-    return std::min(nscoord_MAX, a + b);
+    return (std::min)(nscoord_MAX, a + b);
   }
 #endif
 }
 
 /**
@@ -209,11 +209,11 @@
       // case (c) for integers
       return nscoord_MAX;
     } else {
       // case (d) for integers
       // Cap the result, in case we're dealing with numbers near nscoord_MAX
-      return std::min(nscoord_MAX, a - b);
+      return (std::min)(nscoord_MAX, a - b);
     }
 #endif
   }
 }
 
diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsISupportsImpl.h xulrunner-sdk/include/nsISupportsImpl.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsISupportsImpl.h	2021-01-15 00:10:39.188254000 +0800
+++ xulrunner-sdk/include/nsISupportsImpl.h	2021-03-05 09:44:08.691223400 +0800
@@ -18,11 +18,11 @@
 #include "prthread.h" /* needed for thread-safety checks */
 #endif // !XPCOM_GLUE_AVOID_NSPR
 
 #include "nsDebug.h"
 #include "nsXPCOM.h"
-#ifndef XPCOM_GLUE
+#if 1//ndef XPCOM_GLUE
 #include "mozilla/Atomics.h"
 #endif
 #include "mozilla/Attributes.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/Compiler.h"
@@ -345,11 +345,11 @@
   nsrefcnt operator++(int) = delete;
   nsrefcnt operator--(int) = delete;
   nsrefcnt mValue;
 };
 
-#ifndef XPCOM_GLUE
+#if 1//ndef XPCOM_GLUE
 namespace mozilla {
 class ThreadSafeAutoRefCnt
 {
 public:
   ThreadSafeAutoRefCnt() : mValue(0) {}
diff -rU5 ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsRect.h xulrunner-sdk/include/nsRect.h
--- ../KMXULRunner/obj-xulrunner-i686-pc-mingw32/dist/include/nsRect.h	2021-03-05 09:14:08.290246000 +0800
+++ xulrunner-sdk/include/nsRect.h	2021-03-05 09:56:48.547684700 +0800
@@ -75,30 +75,30 @@
   {
 #ifdef NS_COORD_IS_FLOAT
     return UnionEdges(aRect);
 #else
     nsRect result;
-    result.x = std::min(aRect.x, x);
-    int64_t w = std::max(int64_t(aRect.x) + aRect.width, int64_t(x) + width) - result.x;
+    result.x = (std::min)(aRect.x, x);
+    int64_t w = (std::max)(int64_t(aRect.x) + aRect.width, int64_t(x) + width) - result.x;
     if (MOZ_UNLIKELY(w > nscoord_MAX)) {
       NS_WARNING("Overflowed nscoord_MAX in conversion to nscoord width");
       // Clamp huge negative x to nscoord_MIN / 2 and try again.
-      result.x = std::max(result.x, nscoord_MIN / 2);
-      w = std::max(int64_t(aRect.x) + aRect.width, int64_t(x) + width) - result.x;
+      result.x = (std::max)(result.x, nscoord_MIN / 2);
+      w = (std::max)(int64_t(aRect.x) + aRect.width, int64_t(x) + width) - result.x;
       if (MOZ_UNLIKELY(w > nscoord_MAX)) {
         w = nscoord_MAX;
       }
     }
     result.width = nscoord(w);
 
-    result.y = std::min(aRect.y, y);
-    int64_t h = std::max(int64_t(aRect.y) + aRect.height, int64_t(y) + height) - result.y;
+    result.y = (std::min)(aRect.y, y);
+    int64_t h = (std::max)(int64_t(aRect.y) + aRect.height, int64_t(y) + height) - result.y;
     if (MOZ_UNLIKELY(h > nscoord_MAX)) {
       NS_WARNING("Overflowed nscoord_MAX in conversion to nscoord height");
       // Clamp huge negative y to nscoord_MIN / 2 and try again.
-      result.y = std::max(result.y, nscoord_MIN / 2);
-      h = std::max(int64_t(aRect.y) + aRect.height, int64_t(y) + height) - result.y;
+      result.y = (std::max)(result.y, nscoord_MIN / 2);
+      h = (std::max)(int64_t(aRect.y) + aRect.height, int64_t(y) + height) - result.y;
       if (MOZ_UNLIKELY(h > nscoord_MAX)) {
         h = nscoord_MAX;
       }
     }
     result.height = nscoord(h);
@@ -226,13 +226,13 @@
 {
   mozilla::gfx::IntRect rect;
   rect.x = NSToIntRoundUp(NSAppUnitsToDoublePixels(x, aAppUnitsPerPixel) * aXScale);
   rect.y = NSToIntRoundUp(NSAppUnitsToDoublePixels(y, aAppUnitsPerPixel) * aYScale);
   // Avoid negative widths and heights due to overflow
-  rect.width  = std::max(0, NSToIntRoundUp(NSAppUnitsToDoublePixels(XMost(),
+  rect.width  = (std::max)(0, NSToIntRoundUp(NSAppUnitsToDoublePixels(XMost(),
                                aAppUnitsPerPixel) * aXScale) - rect.x);
-  rect.height = std::max(0, NSToIntRoundUp(NSAppUnitsToDoublePixels(YMost(),
+  rect.height = (std::max)(0, NSToIntRoundUp(NSAppUnitsToDoublePixels(YMost(),
                                aAppUnitsPerPixel) * aYScale) - rect.y);
   return rect;
 }
 
 // scale the rect but round to smallest containing rect
@@ -242,13 +242,13 @@
 {
   mozilla::gfx::IntRect rect;
   rect.x = NSToIntFloor(NSAppUnitsToFloatPixels(x, float(aAppUnitsPerPixel)) * aXScale);
   rect.y = NSToIntFloor(NSAppUnitsToFloatPixels(y, float(aAppUnitsPerPixel)) * aYScale);
   // Avoid negative widths and heights due to overflow
-  rect.width  = std::max(0, NSToIntCeil(NSAppUnitsToFloatPixels(XMost(),
+  rect.width  = (std::max)(0, NSToIntCeil(NSAppUnitsToFloatPixels(XMost(),
                             float(aAppUnitsPerPixel)) * aXScale) - rect.x);
-  rect.height = std::max(0, NSToIntCeil(NSAppUnitsToFloatPixels(YMost(),
+  rect.height = (std::max)(0, NSToIntCeil(NSAppUnitsToFloatPixels(YMost(),
                             float(aAppUnitsPerPixel)) * aYScale) - rect.y);
   return rect;
 }
 
 // scale the rect but round to largest contained rect
@@ -258,13 +258,13 @@
 {
   mozilla::gfx::IntRect rect;
   rect.x = NSToIntCeil(NSAppUnitsToFloatPixels(x, float(aAppUnitsPerPixel)) * aXScale);
   rect.y = NSToIntCeil(NSAppUnitsToFloatPixels(y, float(aAppUnitsPerPixel)) * aYScale);
   // Avoid negative widths and heights due to overflow
-  rect.width  = std::max(0, NSToIntFloor(NSAppUnitsToFloatPixels(XMost(),
+  rect.width  = (std::max)(0, NSToIntFloor(NSAppUnitsToFloatPixels(XMost(),
                              float(aAppUnitsPerPixel)) * aXScale) - rect.x);
-  rect.height = std::max(0, NSToIntFloor(NSAppUnitsToFloatPixels(YMost(),
+  rect.height = (std::max)(0, NSToIntFloor(NSAppUnitsToFloatPixels(YMost(),
                              float(aAppUnitsPerPixel)) * aYScale) - rect.y);
   return rect;
 }
 
 inline mozilla::gfx::IntRect
